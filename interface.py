import base64
import ipywidgets as widgets

# def get_cid(fname):
#     with open(fname) as data:
#         cid = []
#         for line in data:
#             ID = line.split("\t")[6]
#             if ID.startswith("C"):
#                 cid.append(ID)
#     return cid

def get_cid(data):
    cid = []
    for line in data.splitlines():
        ID = line.split("\t")[6]
        if ID.startswith("C"):
            cid.append(ID)
    return cid

def compute(f1_content, f2_content):

    cid1 = get_cid(f1_content)
    cid2 = get_cid(f2_content)

    # join the two lists, removing duplicates
    allcompounds = list( dict.fromkeys(cid1 + cid2))

    # transform into sets (to compute set intersection)

    set1 = set(cid1)
    set2 = set(cid2)
    both = set1.intersection(set2)
    only1 = set1.difference(both)
    only2 = set2.difference(both)
    
    results = {'n1': len(only1), 'n2': len(only2), 'n_common': len(both)}

    text = ["KEGG_ID\tcolor"]

    for compound in allcompounds:
        if compound in both:
            color = 'yellow'
        elif compound in set1:
            color = 'blue'
        else:
            color = 'red'

        text.append( f'{compound}\t{color}' )
    text = '\n'.join(text)
    results['map'] = text
    return results

def start():
    presentation_title = widgets.HTML(value='<h2>Preparation of files for KEGG Mapper</h2>')
    presentation = widgets.HTML(value='''<p>Upload two <code>.annotated</code> files
    generated by a <span style="color:steelblue;">
    <a href="http://masstrix3.helmholtz-muenchen.de/masstrix3/" target="_blank">MassTRIX</a></span>
    compound search (for different conditions, strains, etc)
    and this tool will generate a file (map.txt) in a format usable by <span style="color:steelblue;">
    <a href="https://www.genome.jp/kegg/mapper.html" target="_blank">KEGG Mapper</a></span></p>
    <p>This file maps of KeGG Ids to the following colors:</p>''')

    colorcodes = widgets.HTML(value='''
    <ul><li><span style="color:goldenrod;">yellow</span> - compounds present in both files</li>
    <li><span style="color:darkblue;">blue</span> - compounds present only in the first file</li>
    <li><span style="color:red;">red</span> - compounds present only in the second file</li></ul>''')

    credits = widgets.HTML(value='''<p>Tool developed by Ant√≥nio Ferreira, Alexandre Coelho and Henrique Silva</p>''')

    out = widgets.Output()
    counts_display = widgets.HTML(value='')
    map_down = widgets.HTML(value='')

    file1_upload = widgets.FileUpload(description='File 1', accept='.annotated', multiple=False)
    file2_upload = widgets.FileUpload(description='File 2', accept='.annotated', multiple=False)
    fname1 = widgets.HTML(value='')
    fname2 = widgets.HTML(value='')

    def on_value_change1(change):
        newvalue = change['new']
        if len(newvalue) == 1:
            [newname] = newvalue
            fname1.value = f'<b style="color:darkblue;">{newname}</b>'
        else:
            fname1.value = f''

    file1_upload.observe(on_value_change1, names='value')

    def on_value_change2(change):
        newvalue = change['new']
        if len(newvalue) == 1:
            [newname] = newvalue
            fname2.value = f'<b style="color:red;">{newname}</b>'
        else:
            fname2.value = f''

    file2_upload.observe(on_value_change2, names='value')

    hbox1 = widgets.HBox([file1_upload, fname1])
    hbox2 = widgets.HBox([file2_upload, fname2])

    button = widgets.Button(description="Create map.txt", button_style='primary')
    button_reset = widgets.Button(description="Reset")
  
    def on_button_clicked(b):
        out.clear_output()
        #file_uploads = (file1_upload, file2_upload)
        if len(file1_upload.value) != 1 or len(file2_upload.value) != 1:
            return
        [name1] = file1_upload.value
        [name2] = file2_upload.value

        f1dict = file1_upload.value[name1]
        f2dict = file2_upload.value[name2]
        file1_upload.observe(on_value_change1, names='value')
        file2_upload.observe(on_value_change2, names='value')

        with out:
            print("Reading files...")
            print(f'     {name1}')
            print(f'     {name2}')
            print("Processing KeGG IDs")

        try:
            f1_content = f1dict["content"].decode('utf-8')
            f2_content = f2dict["content"].decode('utf-8')
        except UnicodeDecodeError:
            f1_content = f1dict["content"].decode('ISO-8859-1')
            f2_content = f2dict["content"].decode('ISO-8859-1')


        results = compute(f1_content, f2_content)

        numbers = [f'<p>There are <span style="color:goldenrod;">{results["n_common"]}</span> common KeGG IDs in both files</p>',
                f'<p>There are <span style="color:darkblue;">{results["n1"]}</span> exclusive KeGG IDs in file <span style="color:darkblue;">{name1}</span></p>',
                f'<p>There are <span style="color:red;">{results["n2"]}</span> exclusive KeGG IDs in file <span style="color:red;">{name2}</span></p>']
        #print_on_html('<br/>'.join(numbers))

        counts_display.value = '\n'.join(numbers)
        b64 = base64.b64encode(results['map'].encode())
        payload = b64.decode()

        with open("map.txt", "w+") as a:
            a.write(results['map'])

        html_button = ['<a download="map.txt" href="data:text/txt;base64,{payload}" download>'.format(payload=payload),
                       '<button class="p-Widget jupyter-widgets jupyter-button widget-button mod-warning">',
                       'Download map.txt</button></a>']

        map_down.value = ''.join(html_button)

    def on_reset_button_clicked(b):
        out.clear_output()
        counts_display.value = ''
        map_down.value = ''
        
        file1_upload.value.clear()
        file1_upload._counter = 0
        file2_upload.value.clear()
        file2_upload._counter = 0
        
        fname1.value = ''
        fname2.value = ''

    button.on_click(on_button_clicked)
    button_reset.on_click(on_reset_button_clicked)

    hbuttonbox = widgets.HBox([button, button_reset])

    vbox = widgets.VBox([presentation_title, presentation, colorcodes, credits, 
                        widgets.HTML(value='<h4>Upload two MassTRIX <code>.annotated</code> files:</h4>'),
                        hbox1, hbox2,
                        widgets.HTML(value='<hr/>'),
                        hbuttonbox,
                        out,
                        counts_display,
                        map_down])
    return vbox
