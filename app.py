"""Preparation of files for KEGG Mapper."""

from io import StringIO, BytesIO

import panel as pn
pn.extension('tabulator')
pn.extension('notifications')
pn.extension(notifications=True)



# widgetry

header = pn.pane.Markdown('''## Preparation of files for KEGG Mapper

Upload two <code>.annotated</code> files generated by a <span style="color:steelblue;">
<a href="http://masstrix3.helmholtz-muenchen.de/masstrix3/" target="_blank">MassTRIX</a></span>
compound search (for different conditions, strains, etc)

This tool will generate a file, <code>map.txt</code>, in a format usable by <span style="color:steelblue;">
<a href="https://www.genome.jp/kegg/mapper.html" target="_blank">KEGG Mapper</a></span>

In <code>map.txt</code>, KeGG IDs are marked with the following colors:

- Compounds present in **both files** ➞ <span style="color:goldenrod;">yellow</span>
- Compounds present only in the **first file** ➞ <span style="color:darkblue;">blue</span>
- Compounds present only in the **second file** ➞ <span style="color:red;">red</span>

Tool developed by *António Ferreira*, *Alexandre Coelho* and *Henrique Silva*

-------''')

file_input1 = pn.widgets.FileInput()
file_input2 = pn.widgets.FileInput()

# the "Clear" button
clear_button = pn.widgets.Button(name='Clear', width=200)
def b_clear(event):
    file_input1.value = None
    file_input2.value = None

clear_button.on_click(b_clear)
action_buttons = pn.Row(clear_button)

file_inputs = pn.Column(pn.widgets.StaticText(name='File 1', value=' '),
                        file_input1,
                        pn.widgets.StaticText(name='File 2', value=' '),
                        file_input2)

app_column = pn.Column(header, file_inputs, action_buttons, width=500)

app_column.servable()